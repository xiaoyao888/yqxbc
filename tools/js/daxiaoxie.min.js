function letter_convert(e) {
    var n = $("#tool-res").val();
    if (n.length <= 0) return tips_error("请输入要转换的内容！"), $("#tool-res").focus(), !1;
    if (5e3 < n.length) return tips_error("输入字符长度不能超过5000！"), $("#tool-res").focus(), !1;
    var r = $(".btn-success");
    switch (r.attr("disabled", "disabled"), e) {
        case"upper_case":
            $("#tool-res").val(n.toUpperCase());
            break;
        case"lower_case":
            $("#tool-res").val(n.toLowerCase());
            break;
        case"capitalize_words":
            $("#tool-res").val(capitalize_words(n));
            break;
        case"capitalize_sentence":
            $("#tool-res").val(capitalize_sentence(n));
            break;
        case"upper_case_except":
            $("#tool-res").val(upper_case_except(n));
            break;
        case"title_case":
            $("#tool-res").val(title_case(n));
            break;
        case"blank2unline":
            $("#tool-res").val(blank2unline(n));
            break;
        case"blank2camel":
            $("#tool-res").val(blank2camel(n));
            break;
        case"camel2unline":
            $("#tool-res").val(camel2unline(n));
            break;
        case"unline2blank":
            $("#tool-res").val(unline2blank(n));
            break;
        case"unline2midline":
            $("#tool-res").val(unline2midline(n));
            break;
        case"midline2unline":
            $("#tool-res").val(midline2unline(n));
            break;
        case"unline2dot":
            $("#tool-res").val(unline2dot(n));
            break;
        case"dot2unline":
            $("#tool-res").val(dot2unline(n));
            break;
        case"del_blank":
            $("#tool-res").val(del_blank(n));
            break;
        case"del_punctuation":
            $("#tool-res").val(del_punctuation(n));
            break;
        default:
            // toUpperCase
            /*tips_loading(), $.ajax({
                type: "POST",
                dataType: "json",
                url: "/daxiaoxie/ajax",
                data: {text: n, type: e},
                success: function (e) {
                    1 == e.status ? (tips_clear(), $("#tool-res").val(e.data)) : tips_error(e.info)
                }
            })*/
    }
    r.removeAttr("disabled", "disabled")
    // _hmt.push(["_trackEvent", "tool", "daxiaoxie", e, 1])
}

$("#tool-res").bind("keyup", function () {
    count_text(this)
});
var capitalize_words = function (e) {
    var n = e.toLowerCase().split(/\r?\n/);
    return (n = n.map(function (e) {
        return (e = e.replace(/\s+/g, " ").split(" ")).map(function (e) {
            return e.charAt(0).toUpperCase() + e.slice(1)
        }).join(" ")
    })).join("\n")
}, capitalize_sentence = function (e) {
    var n = e.toLowerCase().split(/\r?\n/);
    return (n = n.map(function (e) {
        return e = (e = e.replace(/\s+/g, " ")).replace(/(^[^\w]*\w|\s*[.!?:]+\s*\w)/g, function (e, n) {
            return e.toUpperCase()
        })
    })).join("\n")
}, upper_case_except = function (e) {
    for (var n = ["a", "an", "the", "and", "but", "or", "for", "nor", "on", "at", "to", "from", "by", "in", "out", "of", "up", "over", "with", "as"], r = e.toLowerCase().split(" "), a = 0; a < r.length; a++) n.includes(r[a].toLowerCase()) || (r[a] = r[a].toUpperCase());
    return r.join(" ")
}, title_case = function (e) {
    var r = ["a", "an", "the", "and", "but", "or", "for", "nor", "on", "at", "to", "from", "by", "in", "out", "of", "up", "over", "with", "as"],
        n = e.split(/\r?\n/);
    return (n = n.map(function (e) {
        return e.toLowerCase().replace(/\s+/g, " ").split(" ").map(function (e, n) {
            return r.includes(e) && 0 < n ? e : e.charAt(0).toUpperCase() + e.slice(1)
        }).join(" ")
    })).join("\n")
}, blank2unline = function (e) {
    var n = e.split(/\r?\n/);
    return (n = n.map(function (e) {
        return e.replace(/\s+/g, "_")
    })).join("\n")
}, blank2camel = function (e) {
    var n = e.split(/\r?\n/);
    return (n = n.map(function (e) {
        return (e = (e = (e = e.toLowerCase()).replace(/[-_]/g, " ")).replace(/(?:^\w|[A-Z]|\b\w)/g, function (e, n) {
            return 0 === n ? e.toLowerCase() : e.toUpperCase()
        })).replace(/\s+/g, "")
    })).join("\n")
}, blank2pascal = function (e) {
    var n = e.split(/\r?\n/);
    return (n = n.map(function (e) {
        return (e = (e = (e = e.toLowerCase()).replace(/[-_]/g, " ")).replace(/(?:^\w|[A-Z]|\b\w)/g, function (e, n) {
            return e.toUpperCase()
        })).replace(/\s+/g, "")
    })).join("\n")
}, camel2unline = function (e) {
    var n = e.split(/\r?\n/);
    return (n = n.map(function (e) {
        return e.replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase()
    })).join("\n")
}, unline2blank = function (e) {
    return e.replace(/_/g, " ")
}, unline2midline = function (e) {
    return e.replace(/_/g, "-")
}, midline2unline = function (e) {
    return e.replace(/-/g, "_")
}, unline2dot = function (e) {
    return e.replace(/_/g, ".")
}, dot2unline = function (e) {
    return e.replace(/\./g, "_")
}, del_blank = function (e) {
    var n = e.split(/\r?\n/);
    return (n = n.map(function (e) {
        return e.replace(/\s+/g, "")
    })).join("\n")
}, del_punctuation = function (e) {
    var n = e.split(/\r?\n/);
    return (n = n.map(function (e) {
        return e.replace(/[^\w\s]|_/g, " ").replace(/\s+/g, " ")
    })).join("\n")
};